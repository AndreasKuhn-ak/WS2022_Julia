


@misc{andreaskuhn_how_2022,
	title = {How to solve the same numerical {Problem} in 7 different {Programming} {Languages}},
	url = {https://medium.com/@andreaskuhn92/how-to-solve-the-same-numerical-problem-in-7-different-programming-languages-a64daac3ed64},
	abstract = {Finding the right tool, to solve a problem, can often be a big problem by itself. In the case of programming, this translates to choosing…},
	language = {en},
	urldate = {2023-01-23},
	journal = {Medium},
	author = {Andreas Kuhn},
	month = jun,
	year = {2022},
	file = {Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\23R5N9JT\\how-to-solve-the-same-numerical-problem-in-7-different-programming-languages-a64daac3ed64.html:text/html},
}


@misc{hemsoth_julia_2017,
	title = {Julia {Language} {Delivers} {Petascale} {HPC} {Performance}},
	url = {https://www.nextplatform.com/2017/11/28/julia-language-delivers-petascale-hpc-performance/},
	abstract = {Written in the productivity language Julia, the Celeste project—which aims to catalogue all of the telescope data for the stars and galaxies in in},
	language = {en-US},
	urldate = {2023-01-23},
	journal = {The Next Platform},
	author = {Hemsoth, Nicole},
	month = nov,
	year = {2017},
	file = {Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\4BNEP8PS\\julia-language-delivers-petascale-hpc-performance.html:text/html},
}

@article{perkel_julia_2019,
	title = {Julia: come for the syntax, stay for the speed},
	volume = {572},
	copyright = {2021 Nature},
	shorttitle = {Julia},
	url = {https://www.nature.com/articles/d41586-019-02310-3},
	doi = {10.1038/d41586-019-02310-3},
	abstract = {Researchers often find themselves coding algorithms in one programming language, only to have to rewrite them in a faster one. An up-and-coming language could be the answer.},
	language = {en},
	number = {7767},
	urldate = {2023-01-23},
	journal = {Nature},
	author = {Perkel, Jeffrey M.},
	month = jul,
	year = {2019},
	note = {Bandiera\_abtest: a
Cg\_type: Toolbox
Number: 7767
Publisher: Nature Publishing Group
Subject\_term: Computer science, Computational biology and bioinformatics, Software},
	keywords = {Computational biology and bioinformatics, Computer science, Software},
	pages = {141--142},
	file = {Full Text PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\TFST7F7C\\Perkel - 2019 - Julia come for the syntax, stay for the speed.pdf:application/pdf;Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\I4KI37HI\\d41586-019-02310-3.html:text/html},
}

@article{bezanson_julia_2017,
	title = {Julia: {A} {Fresh} {Approach} to {Numerical} {Computing}},
	volume = {59},
	issn = {0036-1445, 1095-7200},
	shorttitle = {Julia},
	url = {https://epubs.siam.org/doi/10.1137/141000671},
	doi = {10.1137/141000671},
	language = {en},
	number = {1},
	urldate = {2023-01-23},
	journal = {SIAM Review},
	author = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
	month = jan,
	year = {2017},
	pages = {65--98},
	file = {Bezanson et al. - 2017 - Julia A Fresh Approach to Numerical Computing.pdf:C\:\\Users\\ank10ki\\Zotero\\storage\\KL5QZ8PA\\Bezanson et al. - 2017 - Julia A Fresh Approach to Numerical Computing.pdf:application/pdf},
}

@misc{bezanson_julia_2012,
	title = {Julia: {A} {Fast} {Dynamic} {Language} for {Technical} {Computing}},
	shorttitle = {Julia},
	url = {http://arxiv.org/abs/1209.5145},
	doi = {10.48550/arXiv.1209.5145},
	abstract = {Dynamic languages have become popular for scientific computing. They are generally considered highly productive, but lacking in performance. This paper presents Julia, a new dynamic language for technical computing, designed for performance from the beginning by adapting and extending modern programming language techniques. A design based on generic functions and a rich type system simultaneously enables an expressive programming model and successful type inference, leading to good performance for a wide range of programs. This makes it possible for much of the Julia library to be written in Julia itself, while also incorporating best-of-breed C and Fortran libraries.},
	urldate = {2023-01-23},
	publisher = {arXiv},
	author = {Bezanson, Jeff and Karpinski, Stefan and Shah, Viral B. and Edelman, Alan},
	month = sep,
	year = {2012},
	note = {arXiv:1209.5145 [cs]},
	keywords = {Computer Science - Computational Engineering, Finance, and Science, Computer Science - Programming Languages, D.3.2},
	file = {arXiv Fulltext PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\7UG8AB5X\\Bezanson et al. - 2012 - Julia A Fast Dynamic Language for Technical Compu.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\PQMJCF2L\\1209.html:text/html},
}

@article{gao_julia_2020,
	title = {Julia language in machine learning: {Algorithms}, applications, and open issues},
	volume = {37},
	issn = {1574-0137},
	shorttitle = {Julia language in machine learning},
	url = {https://www.sciencedirect.com/science/article/pii/S157401372030071X},
	doi = {10.1016/j.cosrev.2020.100254},
	abstract = {Machine learning is driving development across many fields in science and engineering. A simple and efficient programming language could accelerate applications of machine learning in various fields. Currently, the programming languages most commonly used to develop machine learning algorithms include Python, MATLAB, and C/C ++. However, none of these languages well balance both efficiency and simplicity. The Julia language is a fast, easy-to-use, and open-source programming language that was originally designed for high-performance computing, which can well balance the efficiency and simplicity. This paper summarizes the related research work and developments in the applications of the Julia language in machine learning. It first surveys the popular machine learning algorithms that are developed in the Julia language. Then, it investigates applications of the machine learning algorithms implemented with the Julia language. Finally, it discusses the open issues and the potential future directions that arise in the use of the Julia language in machine learning.},
	language = {en},
	urldate = {2023-01-23},
	journal = {Computer Science Review},
	author = {Gao, Kaifeng and Mei, Gang and Piccialli, Francesco and Cuomo, Salvatore and Tu, Jingzhi and Huo, Zenan},
	month = aug,
	year = {2020},
	keywords = {Artificial neural networks, Deep learning, Julia language, Machine learning, Supervised learning, Unsupervised learning},
	pages = {100254},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\CIFP5QMC\\Gao et al. - 2020 - Julia language in machine learning Algorithms, ap.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\AWVQ77US\\S157401372030071X.html:text/html},
}

@misc{roesch_julia_2021,
	title = {Julia for {Biologists}},
	url = {http://arxiv.org/abs/2109.09973},
	doi = {10.48550/arXiv.2109.09973},
	abstract = {Increasing emphasis on data and quantitative methods in the biomedical sciences is making biological research more computational. Collecting, curating, processing, and analysing large genomic and imaging data sets poses major computational challenges, as does simulating larger and more realistic models in systems biology. Here we discuss how a relative newcomer among computer programming languages -- Julia -- is poised to meet the current and emerging demands in the computational biosciences, and beyond. Speed, flexibility, a thriving package ecosystem, and readability are major factors that make high-performance computing and data analysis available to an unprecedented degree to "gifted amateurs". We highlight how Julia's design is already enabling new ways of analysing biological data and systems, and we provide a, necessarily incomplete, list of resources that can facilitate the transition into the Julian way of computing.},
	urldate = {2023-01-23},
	publisher = {arXiv},
	author = {Roesch, Elisabeth and Greener, Joe G. and MacLean, Adam L. and Nassar, Huda and Rackauckas, Christopher and Holy, Timothy E. and Stumpf, Michael P. H.},
	month = sep,
	year = {2021},
	note = {arXiv:2109.09973 [q-bio]},
	keywords = {Quantitative Biology - Quantitative Methods},
	annote = {Comment: 17 pages, 6 figures},
	file = {arXiv Fulltext PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\2Y7HYHBL\\Roesch et al. - 2021 - Julia for Biologists.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\PLRGRJB8\\2109.html:text/html},
}

@article{kramer_quantumopticsjl_2018,
	title = {{QuantumOptics}.jl: {A} {Julia} framework for simulating open quantum systems},
	volume = {227},
	issn = {0010-4655},
	shorttitle = {{QuantumOptics}.jl},
	url = {https://www.sciencedirect.com/science/article/pii/S0010465518300328},
	doi = {10.1016/j.cpc.2018.02.004},
	abstract = {We present an open source computational framework geared towards the efficient numerical investigation of open quantum systems written in the Julia programming language. Built exclusively in Julia and based on standard quantum optics notation, the toolbox offers speed comparable to low-level statically typed languages, without compromising on the accessibility and code readability found in dynamic languages. After introducing the framework, we highlight its features and showcase implementations of generic quantum models. Finally, we compare its usability and performance to two well-established and widely used numerical quantum libraries.
Program summary
Program Title: QuantumOptics.jl Program Files doi: http://dx.doi.org/10.17632/3696r5jhm4.1 Licensing provisions: MIT Programming language: Julia Supplementary material: Full list of functions (API) as html Nature of problem: Dynamics of open quantum systems Solution method: Numerically solving the Schrödinger or master equation or a Monte Carlo wave-function approach. Additional comments including Restrictions and Unusual features: The framework may be used for problems that fulfill the necessary conditions such that they can be described by a Schrödinger or master equation. Furthermore, the aim is to efficiently and easily simulate systems of moderate size rather than pushing the limits of what is possible numerically.},
	language = {en},
	urldate = {2023-01-23},
	journal = {Computer Physics Communications},
	author = {Krämer, Sebastian and Plankensteiner, David and Ostermann, Laurin and Ritsch, Helmut},
	month = jun,
	year = {2018},
	keywords = {Julia language, Numerics, Quantum mechanics, Quantum optics},
	pages = {109--116},
	file = {ScienceDirect Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\W8JCPE54\\S0010465518300328.html:text/html;Submitted Version:C\:\\Users\\ank10ki\\Zotero\\storage\\568LA22R\\Krämer et al. - 2018 - QuantumOptics.jl A Julia framework for simulating.pdf:application/pdf},
}

@article{danisch_makiejl_2021,
	title = {Makie.jl: {Flexible} high-performance data visualization for {Julia}},
	volume = {6},
	issn = {2475-9066},
	shorttitle = {Makie.jl},
	url = {https://joss.theoj.org/papers/10.21105/joss.03349},
	doi = {10.21105/joss.03349},
	abstract = {Makie.jl is a cross-platform plotting ecosystem for the Julia programming language (Bezanson et al., 2012), which enables researchers to create high-performance, GPU-powered, interactive visualizations, as well as publication-quality vector graphics with one unified interface. The infrastructure based on Observables.jl allows users to express how a visualization depends on multiple parameters and data sources, which can then be updated live, either programmatically, or through sliders, buttons and other GUI elements. A sophisticated layout system makes it easy to assemble complex figures. It is designed to avoid common difficulties when aligning nested subplots of different sizes, or placing colorbars or legends freely without spacing issues. Makie.jl leverages the Julia type system to automatically convert many kinds of input arguments which results in a very flexible API that reduces the need to manually prepare data. Finally, users can extend every step of this pipeline for their custom types through Julia’s powerful multiple dispatch mechanism, making Makie a highly productive and generic visualization system.},
	language = {en},
	number = {65},
	urldate = {2023-01-23},
	journal = {Journal of Open Source Software},
	author = {Danisch, Simon and Krumbiegel, Julius},
	month = sep,
	year = {2021},
	pages = {3349},
	file = {Danisch and Krumbiegel - 2021 - Makie.jl Flexible high-performance data visualiza.pdf:C\:\\Users\\ank10ki\\Zotero\\storage\\QTL2HCY2\\Danisch and Krumbiegel - 2021 - Makie.jl Flexible high-performance data visualiza.pdf:application/pdf},
}

@article{knopp_mrirecojl_2021,
	title = {{MRIReco}.jl: {An} {MRI} reconstruction framework written in {Julia}},
	volume = {86},
	issn = {1522-2594},
	shorttitle = {{MRIReco}.jl},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/mrm.28792},
	doi = {10.1002/mrm.28792},
	abstract = {Purpose The aim of this work is to develop a high-performance, flexible, and easy-to-use MRI reconstruction framework using the scientific programming language Julia. Methods Julia is a modern, general purpose programming language with strong features in the area of signal/image processing and numerical computing. It has a high-level syntax but still generates efficient machine code that is usually as fast as comparable C/C++ applications. In addition to the language features itself, Julia has a sophisticated package management system that makes proper modularization of functionality across different packages feasible. Our developed MRI reconstruction framework MRIReco.jl can therefore reuse existing functionality from other Julia packages and concentrate on the MRI-related parts. This includes common imaging operators and support for MRI raw data formats. Results MRIReco.jl is a simple to use framework with a high degree of accessibility. While providing a simple-to-use interface, many of its components can easily be extended and customized. The performance of MRIReco.jl is compared to the Berkeley Advanced Reconstruction Toolbox (BART) and we show that the Julia framework achieves comparable reconstruction speed as the popular C/C++ library. Conclusions Modern programming languages can bridge the gap between high performance and accessible implementations. MRIReco.jl leverages this fact and contributes a promising environment for future algorithmic development in MRI reconstruction.},
	language = {en},
	number = {3},
	urldate = {2023-01-23},
	journal = {Magnetic Resonance in Medicine},
	author = {Knopp, Tobias and Grosser, Mirco},
	year = {2021},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/mrm.28792},
	keywords = {image reconstruction, Julia, magnetic resonance imaging, numerical computing, open source},
	pages = {1633--1646},
	file = {Full Text PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\MCZU8WSR\\Knopp and Grosser - 2021 - MRIReco.jl An MRI reconstruction framework writte.pdf:application/pdf;Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\VEP5XNMP\\mrm.html:text/html},
}

@article{coleman_matlab_2021,
	title = {Matlab, {Python}, {Julia}: {What} to {Choose} in {Economics}?},
	volume = {58},
	issn = {1572-9974},
	shorttitle = {Matlab, {Python}, {Julia}},
	url = {https://doi.org/10.1007/s10614-020-09983-3},
	doi = {10.1007/s10614-020-09983-3},
	abstract = {We perform a comparison of Matlab, Python and Julia as programming languages to be used for implementing global nonlinear solution techniques. We consider two popular applications: a neoclassical growth model and a new Keynesian model. The goal of our analysis is twofold: First, it is aimed at helping researchers in economics choose the programming language that is best suited to their applications and, if needed, help them transit from one programming language to another. Second, our collections of routines can be viewed as a toolbox with a special emphasis on techniques for dealing with high dimensional economic problems. We provide the routines in the three languages for constructing random and quasi-random grids, low-cost monomial integration, various global solution methods, routines for checking the accuracy of the solutions as well as examples of parallelization. Our global solution methods are not only accurate but also fast. Solving a new Keynesian model with eight state variables only takes a few seconds, even in the presence of an active zero lower bound on nominal interest rates. This speed is important because it allows the model to be solved repeatedly as would be required for estimation.},
	language = {en},
	number = {4},
	urldate = {2023-01-23},
	journal = {Computational Economics},
	author = {Coleman, Chase and Lyon, Spencer and Maliar, Lilia and Maliar, Serguei},
	month = dec,
	year = {2021},
	keywords = {C6, C61, C63, C68, Dynamic model, E31, E52, Global nonlinear, Low discrepancy, New Keynesian model, Quasi Monte Carlo, Toolkit},
	pages = {1263--1288},
	file = {Full Text PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\GAQP8P7S\\Coleman et al. - 2021 - Matlab, Python, Julia What to Choose in Economics.pdf:application/pdf},
}

@article{gawron_quantuminformationjljulia_2018,
	title = {{QuantumInformation}.jl—{A} {Julia} package for numerical computation in quantum information theory},
	volume = {13},
	issn = {1932-6203},
	url = {https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0209358},
	doi = {10.1371/journal.pone.0209358},
	abstract = {Numerical investigations are an important research tool in quantum information theory. There already exists a wide range of computational tools for quantum information theory implemented in various programming languages. However, there is little effort in implementing this kind of tools in the Julia language. Julia is a modern programming language designed for numerical computation with excellent support for vector and matrix algebra, extended type system that allows for implementation of elegant application interfaces and support for parallel and distributed computing. QuantumInformation.jl is a new quantum information theory library implemented in Julia that provides functions for creating and analyzing quantum states, and for creating quantum operations in various representations. An additional feature of the library is a collection of functions for sampling random quantum states and operations such as unitary operations and generic quantum channels.},
	language = {en},
	number = {12},
	urldate = {2023-01-23},
	journal = {PLOS ONE},
	author = {Gawron, Piotr and Kurzyk, Dariusz and Pawela, Łukasz},
	month = dec,
	year = {2018},
	note = {Publisher: Public Library of Science},
	keywords = {Computer software, Eigenvalues, Entropy, Linear algebra, Programming languages, Quantum computing, Quantum entanglement, Quantum state},
	pages = {e0209358},
	file = {Full Text PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\A6XTIX4B\\Gawron et al. - 2018 - QuantumInformation.jl—A Julia package for numerica.pdf:application/pdf},
}

@misc{churavy_bridging_2022,
	title = {Bridging {HPC} {Communities} through the {Julia} {Programming} {Language}},
	url = {http://arxiv.org/abs/2211.02740},
	doi = {10.48550/arXiv.2211.02740},
	abstract = {The Julia programming language has evolved into a modern alternative to fill existing gaps in scientific computing and data science applications. Julia leverages a unified and coordinated single-language and ecosystem paradigm and has a proven track record of achieving high performance without sacrificing user productivity. These aspects make Julia a viable alternative to high-performance computing's (HPC's) existing and increasingly costly many-body workflow composition strategy in which traditional HPC languages (e.g., Fortran, C, C++) are used for simulations, and higher-level languages (e.g., Python, R, MATLAB) are used for data analysis and interactive computing. Julia's rapid growth in language capabilities, package ecosystem, and community make it a promising universal language for HPC. This paper presents the views of a multidisciplinary group of researchers from academia, government, and industry that advocate for an HPC software development paradigm that emphasizes developer productivity, workflow portability, and low barriers for entry. We believe that the Julia programming language, its ecosystem, and its community provide modern and powerful capabilities that enable this group's objectives. Crucially, we believe that Julia can provide a feasible and less costly approach to programming scientific applications and workflows that target HPC facilities. In this work, we examine the current practice and role of Julia as a common, end-to-end programming model to address major challenges in scientific reproducibility, data-driven AI/machine learning, co-design and workflows, scalability and performance portability in heterogeneous computing, network communication, data management, and community education. As a result, the diversification of current investments to fulfill the needs of the upcoming decade is crucial as more supercomputing centers prepare for the exascale era.},
	urldate = {2023-01-23},
	publisher = {arXiv},
	author = {Churavy, Valentin and Godoy, William F. and Bauer, Carsten and Ranocha, Hendrik and Schlottke-Lakemper, Michael and Räss, Ludovic and Blaschke, Johannes and Giordano, Mosè and Schnetter, Erik and Omlin, Samuel and Vetter, Jeffrey S. and Edelman, Alan},
	month = nov,
	year = {2022},
	note = {arXiv:2211.02740 [cs]},
	keywords = {Computer Science - Distributed, Parallel, and Cluster Computing},
	annote = {Comment: 20 pages; improved image quality},
	file = {arXiv Fulltext PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\MEGF3NDM\\Churavy et al. - 2022 - Bridging HPC Communities through the Julia Program.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\DLG2PFXH\\2211.html:text/html},
}

@misc{fernandes_new_2022,
	title = {A new approach and code for spinning black holes in modified gravity},
	url = {http://arxiv.org/abs/2212.07293},
	doi = {10.48550/arXiv.2212.07293},
	abstract = {We discuss and implement a spectral method approach to computing stationary and axisymmetric black hole solutions and their properties in modified theories of gravity. The resulting code is written in the Julia language and is transparent and easily adapted to new settings. We test the code on both general relativity and on Einstein-Scalar-Gauss-Bonnet gravity. It is accurate and fast, converging on a spinning solution in these theories with tiny errors (\${\textbackslash}sim {\textbackslash}mathcal\{O\}{\textbackslash}left(10{\textasciicircum}\{-13\}{\textbackslash}right)\$ in most cases) in a matter of seconds.},
	urldate = {2023-01-23},
	publisher = {arXiv},
	author = {Fernandes, Pedro G. S. and Mulryne, David J.},
	month = dec,
	year = {2022},
	note = {arXiv:2212.07293 [astro-ph, physics:gr-qc, physics:hep-th]},
	keywords = {Astrophysics - Cosmology and Nongalactic Astrophysics, General Relativity and Quantum Cosmology, High Energy Physics - Theory},
	annote = {Comment: 40 pages, 14 figures. GitHub repository: https://github.com/pgsfernandes/SpinningBlackHoles.jl},
	file = {arXiv Fulltext PDF:C\:\\Users\\ank10ki\\Zotero\\storage\\QZ8HKYHV\\Fernandes and Mulryne - 2022 - A new approach and code for spinning black holes i.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\EBAE2L9I\\2212.html:text/html},
}
@misc{al_julia_nodate,
	title = {Julia {Micro}-{Benchmarks}},
	url = {https://julialang.org/benchmarks/},
	abstract = {The official website for the Julia Language. Julia is a language that is fast, dynamic, easy to use, and open source. Click here to learn more.},
	language = {en},
	month = dec,
	year = {2021},
	urldate = {2023-01-24},
	author = {Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman},
	file = {Snapshot:C\:\\Users\\ank10ki\\Zotero\\storage\\4DLICQGX\\benchmarks.html:text/html},
}

@article{DanischKrumbiegel2021,
  doi = {10.21105/joss.03349},
  url = {https://doi.org/10.21105/joss.03349},
  year = {2021},
  publisher = {The Open Journal},
  volume = {6},
  number = {65},
  pages = {3349},
  author = {Simon Danisch and Julius Krumbiegel},
  title = {Makie.jl: Flexible high-performance data visualization for Julia},
  journal = {Journal of Open Source Software}
}